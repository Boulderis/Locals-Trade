@page "/user/businesses"
@inherits OwningComponentBase<IServiceRepository>
@inject IHttpContextAccessor context

<table class="table table-sm table-striped table-bordered">
    <thead>
        <tr>
            <th>Header</th>
        </tr>
    </thead>
    <tbody>
        @if (UserBusinesses?.Count() > 0)
        {
            @foreach (Business b in UserBusinesses)
            {
                <tr>
                    <td>@b.Header</td>
                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(b.BusinessID)">Advertisement page</NavLink>
                        <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(b.BusinessID)">Edit</NavLink>
                        <NavLink class="btn btn-light btm-sm" href="@GetFeedbackUrl(b.BusinessID)">Business feedbacks</NavLink>
                        <NavLink class="btn btn-danger btn-sm" @onclick="@(e => DeleteBusiness(b))">Delete</NavLink>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No businesses being advertised.</td>
            </tr>
        }
    </tbody>
</table>

<NavLink class="btn btn-primary" href="/business/addAdvertisement">Advertise a business</NavLink>

@code
{

    public IServiceRepository Repository => Service;

    public IEnumerable<Business> UserBusinesses { get; set; }

    protected override async Task OnInitializedAsync() {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        try
        {
            long userID = long.Parse(context.HttpContext.User.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value);
            UserBusinesses = await Repository.Business.Where(b => b.UserID == userID).ToListAsync();
        }
        catch (Exception)
        {
            Debug.WriteLine("Intrusion. Someone accessed User Business page without authentication.");
            return;
        }
    }

    public async Task DeleteBusiness(Business b) {
        Repository.DeleteBusiness(b);
        await UpdateData();
    }

    public string GetDetailsUrl(long id) => $"/business/{id}";
    public string GetEditUrl(long id) => $"/business/editAdvertisement/{id}";
    public string GetFeedbackUrl(long id) => $"/business/feedbacks/{id}";

}