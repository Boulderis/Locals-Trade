@page "/orders/{productId:long}"

@layout EmptyLayout

<div class="bg-info text-white p-2">
    <div class="container-fluid">
        <div class="row">
            <div class="col">
                <a style="color:white;" class="navbar-brand ml-2" href="/">Locals Trade</a>
                @if (Product != null)
                {
                <div style="text-align: center; word-wrap: break-word;">
                <b>@Product.Name: @Product.PricePerUnit per @Product.Unit</b>
                </div>
                }
            </div>
            <div class="col-2 text-right">
                @if (LoggedIn)
                {
                    <a class="btn btn-sm btn-primary" href="/auth/signout">Logout</a>
                }
            </div>
        </div>
    </div>
</div>

@if (Product != null)
{
<table class="table table-sm table-bordered table-striped">
    <tbody>
    <tr style=" text-align: center; ">
        <th>Product</th>
        <th>Amount<br />  ordered</th>
        <th>Total sum for<br /> the amount</th>
        <th>Address for delivery</th>
        <th>Client's comment</th>
        <th>Date ordered</th>
        <th>Write an email to a client</th>
    </tr>
        @foreach(var element in OrdersAndStatus)
        {
            Order order = element.Item1;
            bool status = element.Item2;
            int index = OrdersAndStatus.FindIndex(ind => ind.Equals(element));
            decimal sum = order.Amount * Product.PricePerUnit;
            <tr>
                <td>@order.Amount</td>
                <td>@sum</td>
                <td>@order.Address</td>
                <td>@order.Comment</td>
                <td>@order.DateAdded</td>
                <td>
                    @if (status)
                    {
                        <textarea @onchange="@(e => replaceTuple(element, true, e.Value.ToString()))" />
                        <button type="button" class="btn btn-secondary" @onclick="@(args =>
                                                                                    {
                                                                                        Send(order.UserId, OrdersAndStatus[index].Item3);
                                                                                        replaceTuple(element, false, "");
                                                                                    })">
                            Send email
                        </button>
                    }
                    else
                    {
                        <label>Email sent</label>
                    }
                </td>
            </tr>
        }
        </tbody>
</table>
}
else
{
    <h1>Product does not exist</h1>
}

@code {

    [Inject]
    public IServiceRepository Repository { get; set; }
    [Inject]
    public IConfiguration Configuration { get; set; }
    [Inject]
    public IHttpContextAccessor Context { get; set; }

    public Product Product { get; set; }

    public List<Tuple<Order, bool, string>> OrdersAndStatus { get; set; }

    public bool LoggedIn { get; set; }

    [Parameter]
    public long ProductId { get; set; }

    protected override void OnParametersSet()
    {
        long.TryParse(Context.HttpContext.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value ?? "0", out long userID);
        if(userID > 0)
        {
            LoggedIn = true;
        }
        Product = Repository.Products.Include(o => o.Orders).FirstOrDefault(p => p.ProductID == ProductId);
        OrdersAndStatus = new List<Tuple<Order, bool, string>>();
        if (Product?.Orders != null)
        {
            Product.Orders = Product.Orders.Where(o => !o.Resolved).OrderByDescending(o => o.DateAdded).ToList();
            foreach (var order in Product?.Orders)
            {
                Tuple<Order, bool, string> element = Tuple.Create(order, true, "");
                OrdersAndStatus.Add(element);
            }
        }
    }

    private void Send(long userId, string letter)
    {
        if (!string.IsNullOrWhiteSpace(letter) && Product?.Orders != null)
        {
            User user = Repository.Users.FirstOrDefault(u => u.UserID == userId);
            if (user != null && user.Email != null)
            {
                new Mailer(Configuration).SendMail(letter, user.Email);
            }
        }
    }

    private void replaceTuple(Tuple<Order, bool, string> element, bool status, string letter)
    {
        int index = OrdersAndStatus.FindIndex(ind => ind.Equals(element));
        OrdersAndStatus[index] = Tuple.Create(element.Item1, status, letter);
    }

}
